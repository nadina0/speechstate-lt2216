{"version":3,"sources":["dmColourChanger.ts","index.tsx"],"names":["sayColour","send","context","type","value","recResult","utterance","say","text","_context","dmMachine","initial","states","idle","on","CLICK","init","TTS_READY","welcome","RECOGNISED","target","cond","TIMEOUT","prompt","entry","ENDSPEECH","ask","stop","always","repaint","actions","cancel","REGION","inspect","url","iframe","machine","Machine","id","dm","asrtts","assign","audioCtx","_ctx","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","then","stream","createMediaStreamSource","getToken","invoke","src","_evt","getAuthorizationToken","onDone","event","azureAuthorizationToken","data","onError","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","process","voice","find","v","test","name","console","error","TTS_ERROR","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","SELECT","noinput","delay","tdmPassivity","STARTSPEECH","inprogress","match","pause","speaking","fail","recLogResult","log","logIntent","nluData","intent","ReactiveButton","props","promptText","state","tdmVisualOutputInfo","el","attribute","promptImage","circleClass","matches","className","alt","style","FigureButton","caption","alternative","imageSrc","App","useMachine","devTools","changeColour","asEffect","document","body","background","recStart","asr","start","recStop","abort","ttsStart","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","confidence","current","figureButtons","tdmExpectedAlternatives","filter","o","visual_information","map","i","onClick","semantic_expression","fetch","Request","method","headers","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.43547937.chunk.js","sourcesContent":["import { MachineConfig, send, Action } from \"xstate\";\r\n\r\n\r\nconst sayColour: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\r\n    type: \"SPEAK\", value: `Repainting to ${context.recResult[0].utterance}`\r\n}))\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'idle',\r\n    states: {\r\n        idle: {\r\n            on: {\r\n                CLICK: 'init'\r\n            }\r\n        },\r\n        init: {\r\n            on: {\r\n                TTS_READY: 'welcome',\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n\r\n        welcome: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    { target: 'stop', cond: (context) => context.recResult[0].utterance === 'Stop.' },\r\n                    { target: 'repaint' }],\r\n                TIMEOUT: '..',\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Tell me the colour\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN'),\r\n                },\r\n            }\r\n        },\r\n        stop: {\r\n            entry: say(\"Ok\"),\r\n            always: 'init'\r\n        },\r\n        repaint: {\r\n            initial: 'prompt',\r\n            states: {\r\n                prompt: {\r\n                    entry: sayColour,\r\n                    on: { ENDSPEECH: 'repaint' }\r\n                },\r\n                repaint: {\r\n                    entry: 'changeColour',\r\n                    always: '#root.dm.welcome'\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, actions, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmColourChanger\";\r\n\r\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\r\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\r\n\r\n\r\nconst { send, cancel } = actions\r\n\r\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\r\nconst REGION = 'northeurope';\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\n\r\nconst defaultPassivity = 10\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n\r\n        asrtts: {\r\n            initial: 'init',\r\n            states: {\r\n                init: {\r\n                    on: {\r\n                        CLICK: {\r\n                            target: 'getToken',\r\n                            actions: [\r\n                                assign({\r\n                                    audioCtx: (_ctx) =>\r\n                                        new ((window as any).AudioContext || (window as any).webkitAudioContext)()\r\n                                }),\r\n                                (context) =>\r\n                                    navigator.mediaDevices.getUserMedia({ audio: true })\r\n                                        .then(function(stream) { context.audioCtx.createMediaStreamSource(stream) })\r\n                            ]\r\n                        }\r\n                    }\r\n                },\r\n                getToken: {\r\n                    invoke: {\r\n                        id: \"getAuthorizationToken\",\r\n                        src: (_ctx, _evt) => getAuthorizationToken(),\r\n                        onDone: {\r\n                            actions: [\r\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\r\n                                'ponyfillASR'],\r\n                            target: 'ponyfillTTS'\r\n                        },\r\n                        onError: {\r\n                            target: 'fail'\r\n                        }\r\n                    }\r\n                },\r\n                ponyfillTTS: {\r\n                    invoke: {\r\n                        id: 'ponyTTS',\r\n                        src: (context, _event) => (callback, _onReceive) => {\r\n                            const ponyfill = createSpeechSynthesisPonyfill({\r\n                                audioContext: context.audioCtx,\r\n                                credentials: {\r\n                                    region: REGION,\r\n                                    authorizationToken: context.azureAuthorizationToken,\r\n                                }\r\n                            });\r\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\r\n                            context.tts = speechSynthesis\r\n                            context.ttsUtterance = SpeechSynthesisUtterance\r\n                            context.tts.addEventListener('voiceschanged', () => {\r\n                                context.tts.cancel()\r\n                                const voices = context.tts.getVoices();\r\n                                let voiceRe = RegExp(\"en-US\", 'u')\r\n                                if (process.env.REACT_APP_TTS_VOICE) {\r\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\r\n                                }\r\n                                const voice = voices.find((v: any) => voiceRe.test(v.name))!\r\n                                if (voice) {\r\n                                    context.voice = voice\r\n                                    callback('TTS_READY')\r\n                                } else {\r\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\r\n                                    callback('TTS_ERROR')\r\n                                }\r\n                            })\r\n                        }\r\n                    },\r\n                    on: {\r\n                        TTS_READY: 'idle',\r\n                        TTS_ERROR: 'fail'\r\n                    }\r\n                },\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    },\r\n                },\r\n                recognising: {\r\n                    initial: 'noinput',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => {\r\n                                    return {\r\n                                        recResult: event.value\r\n                                    }\r\n                                })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle',\r\n                        SELECT: 'idle',\r\n                        CLICK: '.pause'\r\n                    },\r\n                    states: {\r\n                        noinput: {\r\n                            entry: [\r\n                                'recStart',\r\n                                send(\r\n                                    { type: 'TIMEOUT' },\r\n                                    { delay: (context) => (1000 * (context.tdmPassivity || defaultPassivity)), id: 'timeout' }\r\n                                )],\r\n                            on: {\r\n                                TIMEOUT: '#root.asrtts.idle',\r\n                                STARTSPEECH: 'inprogress'\r\n                            },\r\n                            exit: cancel('timeout')\r\n                        },\r\n                        inprogress: {\r\n                        },\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                        pause: {\r\n                            entry: 'recStop',\r\n                            on: { CLICK: 'noinput' }\r\n                        }\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                        SELECT: 'idle',\r\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\r\n                    },\r\n                    exit: 'ttsStop',\r\n                },\r\n                fail: {}\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n    alternative: any;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\r\n        .find((el: any) => el.attribute === \"name\") || {}).value;\r\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\r\n        .find((el: any) => el.attribute === \"image\") || {}).value;\r\n    var circleClass = \"circle\"\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\r\n            break;\r\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\r\n            promptText = \"Click to continue\"\r\n            break;\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            circleClass = \"circle-recognising\"\r\n            promptText = promptText || 'Listening...'\r\n            break;\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            circleClass = \"circle-speaking\"\r\n            promptText = promptText || 'Speaking...'\r\n            break;\r\n        case props.state.matches({ dm: 'idle' }):\r\n            promptText = \"Click to start!\"\r\n            circleClass = \"circle-click\"\r\n            break;\r\n        case props.state.matches({ dm: 'init' }):\r\n            promptText = \"Click to start!\"\r\n            circleClass = \"circle-click\"\r\n            break;\r\n        default:\r\n            promptText = promptText || '\\u00A0'\r\n    }\r\n    return (\r\n        <div className=\"control\">\r\n            <figure className=\"prompt\">\r\n                {promptImage &&\r\n                    <img src={promptImage}\r\n                        alt={promptText} />}\r\n            </figure>\r\n            <div className=\"status\">\r\n                <button type=\"button\" className={circleClass}\r\n                    style={{}} {...props}>\r\n                </button>\r\n                <div className=\"status-text\">\r\n                    {promptText}\r\n                </div>\r\n            </div>\r\n        </div>);\r\n}\r\n\r\nconst FigureButton = (props: Props): JSX.Element => {\r\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\r\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\r\n    return (\r\n        <figure className=\"flex\" {...props}>\r\n            {imageSrc &&\r\n                <img src={imageSrc} alt={caption} />}\r\n            <figcaption>{caption}</figcaption>\r\n        </figure>\r\n    )\r\n}\r\n\r\nfunction App() {\r\n    const [current, send] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n\r\n            changeColour: asEffect((context) => {\r\n                document.body.style.background = context.recResult[0].utterance;\r\n                /* console.log('Ready to receive a voice input.'); */\r\n            }),\r\n\r\n            recStart: asEffect((context) => {\r\n                context.asr.start()\r\n                /* console.log('Ready to receive a voice input.'); */\r\n            }),\r\n            recStop: asEffect((context) => {\r\n                context.asr.abort()\r\n                /* console.log('Recognition stopped.'); */\r\n            }),\r\n            ttsStart: asEffect((context) => {\r\n                const utterance = new context.ttsUtterance(context.ttsAgenda);\r\n                console.log(\"S>\", context.ttsAgenda)\r\n                utterance.voice = context.voice\r\n                utterance.onend = () => send('ENDSPEECH')\r\n                context.tts.speak(utterance)\r\n            }),\r\n            ttsStop: asEffect((context) => {\r\n                /* console.log('TTS STOP...'); */\r\n                context.tts.cancel()\r\n            }),\r\n            ponyfillASR: asEffect((context, _event) => {\r\n                const\r\n                    { SpeechRecognition }\r\n                        = createSpeechRecognitionPonyfill({\r\n                            audioContext: context.audioCtx,\r\n                            credentials: {\r\n                                region: REGION,\r\n                                authorizationToken: context.azureAuthorizationToken,\r\n                            }\r\n                        });\r\n                context.asr = new SpeechRecognition()\r\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\r\n                context.asr.continuous = true\r\n                context.asr.interimResults = true\r\n                context.asr.onresult = function(event: any) {\r\n                    var result = event.results[0]\r\n                    if (result.isFinal) {\r\n                        send({\r\n                            type: \"ASRRESULT\", value:\r\n                                [{\r\n                                    \"utterance\": result[0].transcript,\r\n                                    \"confidence\": result[0].confidence\r\n                                }]\r\n                        })\r\n                    } else {\r\n                        send({ type: \"STARTSPEECH\" });\r\n                    }\r\n                }\r\n\r\n            })\r\n        }\r\n    });\r\n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\r\n        .map(\r\n            (o: any, i: any) => (\r\n                <FigureButton state={current}\r\n                    alternative={o.visual_information}\r\n                    key={i}\r\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\r\n            )\r\n        )\r\n\r\n    switch (true) {\r\n        default:\r\n            return (\r\n                <div className=\"App\">\r\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\r\n                    <div className=\"select-wrapper\">\r\n                        <div className=\"select\">\r\n                            {figureButtons}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n    }\r\n\r\n};\r\n\r\nconst getAuthorizationToken = () => (\r\n    fetch(new Request(TOKEN_ENDPOINT, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\r\n        },\r\n    })).then(data => data.text()))\r\n\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}