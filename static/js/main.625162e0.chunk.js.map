{"version":3,"sources":["dmAppointmentPlus.ts","index.tsx"],"names":["say","text","send","_context","type","value","grammar","title","day","time","grammar2","negation","affirmation","help","menu_grammar","meeting","person","dmMachine","initial","states","idle","on","CLICK","init","TTS_READY","clarification","entry","ENDSPEECH","appointment","assign","counter","context","hist","username","RECOGNISED","target","cond","recResult","utterance","actions","TIMEOUT","counts","always","prompt","prompt2","prompt3","ask","nomatch","userconfirm","hello","menu","confirmmenu","searchPerson","confirmsearching","searching","duckgo","invoke","id","src","event","fetch","Request","then","data","json","onDone","snippet","AbstractText","onError","infoperson","setMeeting","confirmsetupmeetingwithperson","confirmmeeting","info","askday","confirmaskday","infoday","wholeday","confirmwholeday","infowholeday","meetingwholeday","meetingwholedayconfirm","infomeeting","asktime","confirmasktime","infoasktime","askmeeting2","confirmmeetingcreated","meetingcreated","cancel","REGION","inspect","url","iframe","machine","Machine","dm","asrtts","audioCtx","_ctx","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","stream","createMediaStreamSource","getToken","_evt","getAuthorizationToken","azureAuthorizationToken","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","process","voice","find","v","test","name","console","error","TTS_ERROR","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","SELECT","noinput","delay","tdmPassivity","STARTSPEECH","inprogress","match","pause","speaking","fail","recLogResult","log","logIntent","nluData","intent","ReactiveButton","props","promptText","state","tdmVisualOutputInfo","el","attribute","promptImage","circleClass","matches","className","alt","style","FigureButton","caption","alternative","imageSrc","App","useMachine","devTools","changeColour","asEffect","document","body","background","recStart","asr","start","recStop","abort","ttsStart","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","confidence","current","figureButtons","tdmExpectedAlternatives","filter","o","visual_information","map","i","onClick","semantic_expression","method","headers","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.625162e0.chunk.js","sourcesContent":["import { Context } from \"microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/RecognizerConfig\";\r\nimport { title } from \"process\";\r\nimport { textSpanIntersectsWith } from \"typescript\";\r\nimport { MachineConfig, send, Action, assign } from \"xstate\";\r\nimport { init } from \"xstate/lib/actionTypes\";\r\nexport {}\r\n\r\ndeclare var context: any\r\ndeclare var counter: any\r\n\r\n\r\n// @ts-ignore\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    // @ts-ignore\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\n\r\nconst kbRequest = (text: string) =>\r\n    fetch(new Request(`https://cors.eu.org/https://api.duckduckgo.com/?q=${text}&format=json&skip_disambig=1`)).then(data => data.json())\r\n\r\n\r\nconst grammar: { [index: string]: { title?: string, day?: string, time?: string } } = {\r\n    \"Lecture.\": { title: \"Dialogue systems lecture\" },\r\n    \"Lunch.\": { title: \"Lunch at the canteen\" },\r\n    \"Socks.\": {title: \"Let's check who has mismatched socks\"},\r\n    \"Food.\": {title: \"We need to find out who's been stealing from the fridge\"},\r\n    \"Brainstorming.\": {title: \"Brainstorming ideas\"},\r\n    \"Bookclub.\": {title: \"Discussing the latest book for our club.\"},\r\n    \"Movie.\": {title: \"Movie night.\"},\r\n    \"Monday\": {day: \"Monday\"},\r\n    \"Tuesday.\": {day: \"Tuesday\"},\r\n    \"Wednesday.\": {day: \"Wednesday\"},\r\n    \"Thursday.\": {day: \"Thursday\"},\r\n    \"Friday\": { day: \"Friday\" },\r\n    \"Tomorrow.\": {day: \"tomorrow\"},\r\n    \"Next week.\": {day: \"next week\"},\r\n    \"At 9\": { time: \"09:00\" },\r\n    \"At 10\": { time: \"10:00\" },\r\n    \"At 11\": { time: \"11:00\" },\r\n    \"At 12\": {time: \"12:00\"},\r\n    \"At 1\": { time: \"13:00\" },\r\n    \"At 2\": {time: \"14:00\"},\r\n    \"At 3\": { time: \"15:00\" },\r\n    \"At 4\": { time: \"16:00\" },\r\n    \"At 5\": { time: \"17:00\" },\r\n    \"At 6\": { time: \"18:00\" },\r\n    \"At 7\": { time: \"19:00\" },\r\n    \"At 8\": { time: \"20:00\" },\r\n}\r\n\r\nconst grammar2: { [index: string]: { negation?: string, affirmation?: string, help?: string} } = {\r\n    \"No.\": { negation: \"No.\"},\r\n    \"Yes.\": {affirmation: \"Yes.\"},\r\n    \"Of course.\": {affirmation: \"Yes.\"},\r\n    \"No way.\": {negation: \"No.\"},\r\n    \"Sure.\": {affirmation: \"Yes.\"},\r\n    \"Help.\": {help: \"Help\"}\r\n}\r\n\r\nconst menu_grammar: { [index: string]: { meeting?: string, person?: string } } = {\r\n    \"I want to create a meeting.\": {meeting: \"Yes\"},\r\n    \"Create a meeting.\": {meeting: \"Yes\"},\r\n    \"Meeting\": {meeting: \"Yes\"},\r\n    \"I want to search for someone.\": {person: \"Yes\"},\r\n    \"Search for someone.\": {person: \"Yes\"},\r\n    \"Search.\": {person: \"Yes\"}\r\n}\r\n\r\n\r\n// @ts-ignore\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'idle',\r\n\r\n    states: {\r\n        idle: {\r\n            on: {\r\n                CLICK: 'init'\r\n            }\r\n        },\r\n        init: {\r\n            on: {\r\n                TTS_READY: 'appointment',\r\n                CLICK: 'appointment'\r\n            }\r\n        },\r\n        \r\n        help: {\r\n            initial: 'clarification',\r\n            states: {\r\n                clarification: {\r\n                    entry: say('Listen carefully to the instructions you are presented with.'),\r\n                    on: { ENDSPEECH: '#root.dm.appointment.hist' }\r\n                }\r\n            }\r\n        },\r\n\r\n        appointment: {\r\n            initial: 'username',\r\n            entry: assign({counter: (context) => 0}),\r\n            states: {\r\n                hist: {\r\n                    type: 'history',\r\n                },  \r\n\r\n                username: {\r\n                    initial: 'prompt',\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: '#root.dm.help',\r\n                                cond: (context) => 'help' in (grammar2[context.recResult[0].utterance] || {})\r\n                            },\r\n                            {\r\n                                target: 'hello',\r\n                                cond: (context) => context.recResult[0][\"confidence\"] > 0.5,\r\n                                actions: assign({ username: (context) => context.recResult[0].utterance })\r\n                            },\r\n                            {\r\n                                target: 'userconfirm',\r\n                                cond: (context) => context.recResult[0][\"confidence\"] < 0.5,\r\n                                actions: assign({ username: (context) => context.recResult[0].utterance })\r\n                            },\r\n                        ],\r\n                        TIMEOUT: {actions: assign({ counter: (context) => context.counter+1}), target: '.counts'},\r\n                    },\r\n                    states: {\r\n                        counts: {\r\n                            always: [\r\n                            { target: 'prompt', cond: (context) => context.counter === 0},\r\n                            { target: 'prompt2', cond: (context) => context.counter === 1},\r\n                            { target: 'prompt3', cond: (context) => context.counter === 2},\r\n                            { target: '#root.dm.init', cond: (context) => context.counter === 3},\r\n                            ]\r\n                        },\r\n                        prompt: {\r\n                            entry: say(\"What is your name?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        },\r\n                        prompt2: {\r\n                            entry: say(\"Please tell me your name.\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        },\r\n                        prompt3: {\r\n                            entry: say(\"I didn't hear your name.\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN')\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Can you please repeat your name?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        }\r\n                    }\r\n                },\r\n                userconfirm: {\r\n                    initial: 'prompt',\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: 'hello',\r\n                                cond: (context) => 'affirmation' in (grammar2[context.recResult[0].utterance] || {})\r\n                            },\r\n                            {\r\n                                target: '#root.dm.appointment',\r\n                                cond: (context) => \"negation\" in (grammar2[context.recResult[0].utterance] || {})\r\n                            },\r\n                        ],\r\n                    },\r\n                    states: {\r\n                        prompt: {\r\n                            entry: send ((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `did you mean to say ${context.username}? `\r\n                            })),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN')\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, I didn't understand. Can you please repeat that?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        }\r\n\r\n                    }\r\n                },\r\n                hello: {\r\n                    entry: send((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `Hi, ${context.username}.`\r\n                    })),\r\n                    on: { ENDSPEECH: 'menu'}\r\n                }, \r\n                menu: {\r\n                    initial: 'prompt',\r\n                    entry: assign({counter: (context) => 0}),\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: '#root.dm.help',\r\n                                cond: (context) => 'help' in (grammar2[context.recResult[0].utterance] || {})\r\n                            },\r\n                            {\r\n                                target: 'meeting',\r\n                                cond: (context) => \"meeting\" in (menu_grammar[context.recResult[0].utterance] || {}) && context.recResult[0][\"confidence\"] > 0.5,\r\n                            \r\n                            },\r\n                            {\r\n                                target: 'searchPerson',\r\n                                cond: (context) => \"person\" in (menu_grammar[context.recResult[0].utterance] || {}) && context.recResult[0][\"confidence\"] > 0.5,\r\n                            },\r\n                            {\r\n                                target: 'confirmmenu',\r\n                                cond: (context) => context.recResult[0][\"confidence\"] < 0.5,\r\n                            },\r\n                            {\r\n                                target: '.nomatch'\r\n                            }\r\n                        ],\r\n                        TIMEOUT: {actions: assign({ counter: (context) => context.counter+1}), target: '.counts'}\r\n                    },\r\n                    states: {\r\n                        counts: {\r\n                            always: [\r\n                            { target: 'prompt', cond: (context) => context.counter === 0},\r\n                            { target: 'prompt2', cond: (context) => context.counter === 1},\r\n                            { target: 'prompt3', cond: (context) => context.counter === 2},\r\n                            { target: '#root.dm.init', cond: (context) => context.counter === 3},\r\n                            ]\r\n                        },\r\n                        prompt: {\r\n                            entry: say(\"Do you want to search for someone on the internet or create a meeting?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        },\r\n                        prompt2: {\r\n                            entry: say(\"Please tell me what you would like to do.\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        },\r\n                        prompt3: {\r\n                            entry: say(\"Would you rather set a meeting or search for someone?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN')\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Can you please repeat?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        }\r\n\r\n                    }\r\n                },\r\n                confirmmenu: {\r\n                    initial: 'prompt',\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: 'searchPerson',\r\n                                cond: (context) => \"person\" in (menu_grammar[context.recResult[0].utterance] || {}) && 'affirmation' in (grammar2[context.recResult[0].utterance] || {}),\r\n                            },\r\n                            {\r\n                                target: 'setMeeting',\r\n                                cond: (context) => \"meeting\" in (menu_grammar[context.recResult[0].utterance] || {}) && 'affirmation' in (grammar2[context.recResult[0].utterance] || {}),\r\n                            },\r\n                            {\r\n                                target: '#root.dm.appointment.menu',\r\n                                cond: (context) => \"negation\" in (grammar2[context.recResult[0].utterance] || {})\r\n                            },\r\n                        ],\r\n                    },\r\n                    states: {\r\n                        prompt: {\r\n                            entry: send ((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: \"Was that what you meant to say?\"\r\n                            })),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN')\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, I didn't understand. Can you please repeat that?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        }\r\n\r\n                    }\r\n                },\r\n                searchPerson: {\r\n                    initial: 'prompt',\r\n                    entry: assign({counter: (context) => 0}),\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: '#root.dm.help',\r\n                                cond: (context) => 'help' in (grammar2[context.recResult[0].utterance] || {})\r\n                            },\r\n                            {\r\n                                target: 'searching',\r\n                                actions: assign({ person: (context) => context.recResult[0].utterance }),\r\n                                cond: (context) => context.recResult[0][\"confidence\"] > 0.5,\r\n                            },\r\n                            {\r\n                                target: 'confirmsearching',\r\n                                cond: (context) => context.recResult[0][\"confidence\"] < 0.5,\r\n                            },\r\n                        ],\r\n                        TIMEOUT: {actions: assign({ counter: (context) => context.counter+1}), target: '.counts'}\r\n                    },\r\n                    states: {\r\n                        counts: {\r\n                            always: [\r\n                            { target: 'prompt', cond: (context) => context.counter === 0},\r\n                            { target: 'prompt2', cond: (context) => context.counter === 1},\r\n                            { target: 'prompt3', cond: (context) => context.counter === 2},\r\n                            { target: '#root.dm.init', cond: (context) => context.counter === 3},\r\n                            ]\r\n                        },\r\n                        prompt: {\r\n                            entry: say(\"Who are you searching for?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        },\r\n                        prompt2: {\r\n                            entry: say(\"Who are you curious about?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        },\r\n                        prompt3: {\r\n                            entry: say(\"Let's decide who to search for\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN')\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Can you please repeat?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        }\r\n\r\n                    }\r\n                },\r\n                confirmsearching: {\r\n                    initial: 'prompt',\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: 'searching',\r\n                                cond: (context) => 'affirmation' in (grammar2[context.recResult[0].utterance] || {}),\r\n                            },\r\n                            {\r\n                                target: '#root.dm.appointment.searchPerson',\r\n                                cond: (context) => \"negation\" in (grammar2[context.recResult[0].utterance] || {})\r\n                            },\r\n                        ],\r\n                    },\r\n                    states: {\r\n                        prompt: {\r\n                            entry: send ((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `did you mean to say ${context.person}? `\r\n                            })),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN')\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, I didn't understand. Can you please repeat that?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        }\r\n\r\n                    }\r\n                },\r\n                searching: {\r\n                    entry: send((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `OK, searching the internet for ${context.person}`\r\n                    })),\r\n                    on: {ENDSPEECH: 'duckgo'}\r\n                },\r\n                duckgo: {\r\n                    invoke: {\r\n                        id: 'duckduckgo',\r\n                        src: (context, event) => kbRequest(context.person),\r\n                        onDone: {\r\n                            target: 'infoperson',\r\n                            actions: assign({ snippet: (context, event) => event.data.AbstractText })\r\n                        },\r\n                        onError: {\r\n                            target: 'searchPerson'\r\n                        }\r\n                    }\r\n                },\r\n                infoperson: {\r\n                    entry: send((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `${context.snippet}`\r\n                    })),\r\n                    on: { ENDSPEECH: 'setMeeting' }\r\n                },\r\n                setMeeting: {\r\n                    initial: 'prompt',\r\n                    entry: assign({counter: (context) => 0}),\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: '#root.dm.help',\r\n                                cond: (context) => 'help' in (grammar2[context.recResult[0].utterance] || {})\r\n                            },\r\n                            {\r\n                                target: 'askday',\r\n                                cond: (context) => \"affirmation\" in (grammar2[context.recResult[0].utterance] || {}) && context.recResult[0][\"confidence\"] > 0.5 ,\r\n                                actions: assign({ title: (context) => `meeting with ${context.person}`})\r\n                            },\r\n                            {\r\n                                target: 'confirmsetupmeetingwithperson',\r\n                                cond: (context) => context.recResult[0][\"confidence\"] < 0.5 ,\r\n                                actions: assign({ title: (context) => `meeting with ${context.person}`})\r\n                            },\r\n                            {\r\n                                target: 'menu',\r\n                                cond: (context) => 'negation' in (grammar2[context.recResult[0].utterance] || {})\r\n                            },\r\n                            {\r\n                                target: '.nomatch'\r\n                            }\r\n                        ],\r\n                        TIMEOUT: {actions: assign({ counter: (context) => context.counter+1}), target: '.counts'}\r\n                    }, \r\n                    states: {\r\n                        counts: {\r\n                            always: [\r\n                            { target: 'prompt', cond: (context) => context.counter === 0},\r\n                            { target: 'prompt2', cond: (context) => context.counter === 1},\r\n                            { target: 'prompt3', cond: (context) => context.counter === 2},\r\n                            { target: '#root.dm.init', cond: (context) => context.counter === 3},\r\n                            ]\r\n                        },\r\n                        prompt: {\r\n                            entry: say(\"Do you want to meet them?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        },\r\n                        prompt2: {\r\n                            entry: say(\"Would you like me to set up a meeting with them?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        },\r\n                        prompt3: {\r\n                            entry: say(\"Let's set up a meeting with them.\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN')\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Can you please repeat?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        }\r\n\r\n                    }\r\n                },\r\n                confirmsetupmeetingwithperson: {\r\n                    initial: 'prompt',\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: 'askday',\r\n                                cond: (context) => 'affirmation' in (grammar2[context.recResult[0].utterance] || {}),\r\n                            },\r\n                            {\r\n                                target: '#root.dm.appointment.setMeeting',\r\n                                cond: (context) => \"negation\" in (grammar2[context.recResult[0].utterance] || {})\r\n                            },\r\n                        ],\r\n                    },\r\n                    states: {\r\n                        prompt: {\r\n                            entry: send ((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `did you mean to say that? `\r\n                            })),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN')\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, I didn't understand. Can you please repeat that?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        }\r\n\r\n                    }\r\n                },            \r\n                meeting: {\r\n                    initial: 'prompt',\r\n                    entry: assign({counter: (context) => 0}),\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: '#root.dm.help',\r\n                                cond: (context) => 'help' in (grammar2[context.recResult[0].utterance] || {})\r\n                            },\r\n                            {\r\n                                target: 'info',\r\n                                cond: (context) => \"title\" in (grammar[context.recResult[0].utterance] || {}) && context.recResult[0][\"confidence\"] > 0.5,\r\n                                actions: assign({ title: (context) => grammar[context.recResult[0].utterance].title! })\r\n                        \r\n                            },\r\n                            {\r\n                                target: 'confirmmeeting',\r\n                                cond: (context) => context.recResult[0][\"confidence\"] < 0.5,\r\n                                actions: assign({ title: (context) => grammar[context.recResult[0].utterance].title! })\r\n                        \r\n                            },\r\n                            {\r\n                                target: '.nomatch'\r\n                            }\r\n                        ],\r\n                        TIMEOUT: {actions: assign({ counter: (context) => context.counter+1}), target: '.counts'}\r\n                    },\r\n                    states: {\r\n                        counts: {\r\n                            always: [\r\n                            { target: 'prompt', cond: (context) => context.counter === 0},\r\n                            { target: 'prompt2', cond: (context) => context.counter === 1},\r\n                            { target: 'prompt3', cond: (context) => context.counter === 2},\r\n                            { target: '#root.dm.init', cond: (context) => context.counter === 3},\r\n                            ]\r\n                        },\r\n                        prompt: {\r\n                            entry: say(\"Let's create a meeting. What is it about?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        },\r\n                        prompt2: {\r\n                            entry: say(\"Shall we create a meeting? Tell me the occasion.\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        },\r\n                        prompt3: {\r\n                            entry: say(\"What would you like you meeting to be about?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN')\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, I didn't understand. Can you please repeat that?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        }\r\n\r\n                    }\r\n                },\r\n                confirmmeeting: {\r\n                    initial: 'prompt',\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: 'info',\r\n                                cond: (context) => 'affirmation' in (grammar2[context.recResult[0].utterance] || {}),\r\n                            },\r\n                            {\r\n                                target: '#root.dm.appointment.meeting',\r\n                                cond: (context) => \"negation\" in (grammar2[context.recResult[0].utterance] || {})\r\n                            },\r\n                        ],\r\n                    },\r\n                    states: {\r\n                        prompt: {\r\n                            entry: send ((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `did you mean to say that? `\r\n                            })),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN')\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, I didn't understand. Can you please repeat that?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        }\r\n\r\n                    }\r\n                },     \r\n                info: {\r\n                    entry: send((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `OK, ${context.title}`\r\n                    })),\r\n                    on: { ENDSPEECH: 'askday' }\r\n                },\r\n                askday: {\r\n                    initial: 'prompt',\r\n                    entry: assign({counter: (context) => 0}),\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: '#root.dm.help',\r\n                                cond: (context) => 'help' in (grammar2[context.recResult[0].utterance] || {})\r\n                            },\r\n                            {\r\n                                target: 'infoday',\r\n                                cond: (context) => \"day\" in (grammar[context.recResult[0].utterance] || {}) && context.recResult[0][\"confidence\"] > 0.5,\r\n                                actions: assign({ day: (context) => grammar[context.recResult[0].utterance].day! })\r\n                            },\r\n                            {\r\n                                target: 'confirmaskday',\r\n                                cond: (context) => context.recResult[0][\"confidence\"] < 0.5,\r\n                            \r\n                            },\r\n                            {\r\n                                target: '.nomatch'\r\n                            }\r\n                        ],\r\n                        TIMEOUT: {actions: assign({ counter: (context) => context.counter+1}), target: '.counts'}\r\n                    },\r\n\r\n                    states: {\r\n                        counts: {\r\n                            always: [\r\n                            { target: 'prompt', cond: (context) => context.counter === 0},\r\n                            { target: 'prompt2', cond: (context) => context.counter === 1},\r\n                            { target: 'prompt3', cond: (context) => context.counter === 2},\r\n                            { target: '#root.dm.init', cond: (context) => context.counter === 3},\r\n                            ]\r\n                        },\r\n                        prompt: {\r\n                            entry: say(\"On which day is it?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        },\r\n                        prompt2: {\r\n                            entry: say(\"On which day is your meeting?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        },\r\n                        prompt3: {\r\n                            entry: say(\"When should the meeting be?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN')\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, can you please repeat?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        }\r\n\r\n                    }\r\n                },\r\n                confirmaskday: {\r\n                    initial: 'prompt',\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: 'infoday',\r\n                                cond: (context) => 'affirmation' in (grammar2[context.recResult[0].utterance] || {}),\r\n                            },\r\n                            {\r\n                                target: '#root.dm.appointment.askday',\r\n                                cond: (context) => \"negation\" in (grammar2[context.recResult[0].utterance] || {})\r\n                            },\r\n                        ],\r\n                    },\r\n                    states: {\r\n                        prompt: {\r\n                            entry: send ((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `did you mean to say that? `\r\n                            })),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN')\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, I didn't understand. Can you please repeat that?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        }\r\n\r\n                    }\r\n                },   \r\n\r\n                infoday: {\r\n                    entry: send((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `OK, ${context.day}`\r\n                    })),\r\n                    on: { ENDSPEECH: 'wholeday' }\r\n                },\r\n                wholeday: {\r\n                    initial: 'prompt',\r\n                    entry: assign({counter: (context) => 0}),\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: '#root.dm.help',\r\n                                cond: (context) => 'help' in (grammar2[context.recResult[0].utterance] || {})\r\n                            },\r\n                            {\r\n                                target: 'infowholeday',\r\n                                cond: (context) => \"affirmation\" in (grammar2[context.recResult[0].utterance] || {}) && context.recResult[0][\"confidence\"] > 0.5,\r\n                            },\r\n                            {\r\n                                target: 'asktime',\r\n                                cond: (context) => \"negation\" in (grammar2[context.recResult[0].utterance] || {})  && context.recResult[0][\"confidence\"] > 0.5,\r\n                            },\r\n                            {\r\n                                target: 'confirmwholeday',\r\n                                cond: (context) => context.recResult[0][\"confidence\"] < 0.5,\r\n                            },\r\n                            {\r\n                                target: '.nomatch'\r\n                            }\r\n                        ],\r\n                        TIMEOUT: {actions: assign({ counter: (context) => context.counter+1}), target: '.counts'}\r\n                    },\r\n                    states: {\r\n                        counts: {\r\n                            always: [\r\n                            { target: 'prompt', cond: (context) => context.counter === 0},\r\n                            { target: 'prompt2', cond: (context) => context.counter === 1},\r\n                            { target: 'prompt3', cond: (context) => context.counter === 2},\r\n                            { target: '#root.dm.init', cond: (context) => context.counter === 3},\r\n                            ]\r\n                        },\r\n                        prompt: {\r\n                            entry: say(\"Will it take the whole day?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        },\r\n                        prompt2: {\r\n                            entry: say(\"Is your meeting for the whole day?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        },\r\n                        prompt3: {\r\n                            entry: say(\"Would you like your meeting to be for the whole day?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN')\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Could you please repeat?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        }\r\n\r\n                    }\r\n                },\r\n                confirmwholeday: {\r\n                    initial: 'prompt',\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: '#root.dm.appointment.wholeday',\r\n                                cond: (context) => 'affirmation' in (grammar2[context.recResult[0].utterance] || {}),\r\n                            },\r\n                            {\r\n                                target: '#root.dm.appointment.wholeday',\r\n                                cond: (context) => \"negation\" in (grammar2[context.recResult[0].utterance] || {})\r\n                            },\r\n                        ],\r\n                    },\r\n                    states: {\r\n                        prompt: {\r\n                            entry: send ((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `did you mean to say that? `\r\n                            })),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN')\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, I didn't understand. Can you please repeat that?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        }\r\n\r\n                    }\r\n                },\r\n                infowholeday: {\r\n                    entry: send((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `{'Ok, Let's set a meeting for the day.'}`\r\n                    })),\r\n                    on: { ENDSPEECH: 'meetingwholeday'}\r\n                },\r\n                meetingwholeday: {\r\n                    initial: 'prompt',\r\n                    entry: assign({counter: (context) => 0}),\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: '#root.dm.help',\r\n                                cond: (context) => 'help' in (grammar2[context.recResult[0].utterance] || {})\r\n                            },\r\n                            {\r\n                                target: 'meetingcreated',\r\n                                cond: (context) => \"affirmation\" in (grammar2[context.recResult[0].utterance] || {}) && context.recResult[0][\"confidence\"] > 0.5\r\n                            },\r\n                            {\r\n                                target: 'meeting', cond: (context) => \"negation\" in (grammar2[context.recResult[0].utterance] || {}) && context.recResult[0][\"confidence\"] > 0.5\r\n                            },\r\n                            {\r\n                                target: 'meetingwholedayconfirm',\r\n                                cond: (context) =>  context.recResult[0][\"confidence\"] < 0.5\r\n                            },\r\n                            {\r\n                                target: '.nomatch'\r\n                            }\r\n                        ],\r\n                        TIMEOUT: {actions: assign({ counter: (context) => context.counter+1}), target: '.counts'}\r\n                    },\r\n                    states: {\r\n                        counts: {\r\n                            always: [\r\n                            { target: 'prompt', cond: (context) => context.counter === 0},\r\n                            { target: 'prompt2', cond: (context) => context.counter === 1},\r\n                            { target: 'prompt3', cond: (context) => context.counter === 2},\r\n                            { target: '#root.dm.init', cond: (context) => context.counter === 3},\r\n                            ]\r\n                        },\r\n                        prompt: {\r\n                            entry: send ((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `Do you want me to create a meeting titled ${context.title} on ${context.day} for the whole day? `\r\n                            })),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        prompt2: {\r\n                            entry: send ((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `Would you like your meeting ${context.title} to be on ${context.day} for the whole day? `\r\n                            })),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        prompt3: {\r\n                            entry: send ((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `Should I set up a meeting named ${context.title} on ${context.day} for the whole day? `\r\n                            })),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN')\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, I didn't understand. Can you please repeat that?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        }\r\n\r\n                    }\r\n                },\r\n                meetingwholedayconfirm: {\r\n                    initial: 'prompt',\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: 'infomeeting',\r\n                                cond: (context) => 'affirmation' in (grammar2[context.recResult[0].utterance] || {}),\r\n                            },\r\n                            {\r\n                                target: '#root.dm.appointment.meetingwholeday',\r\n                                cond: (context) => \"negation\" in (grammar2[context.recResult[0].utterance] || {})\r\n                            },\r\n                        ],\r\n                    },\r\n                    states: {\r\n                        prompt: {\r\n                            entry: send ((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `did you mean to say that? `\r\n                            })),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN')\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, I didn't understand. Can you please repeat that?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        }\r\n\r\n                    }\r\n\r\n                },\r\n                infomeeting: {\r\n                    entry: send((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `OK`\r\n                    })),\r\n                    on: { ENDSPEECH: 'meetingcreated' }\r\n                },\r\n                asktime: {\r\n                    initial: 'prompt',\r\n                    entry: assign({counter: (context) => 0}),\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: '#root.dm.help',\r\n                                cond: (context) => 'help' in (grammar2[context.recResult[0].utterance] || {})\r\n                            },\r\n                            {\r\n                                target: 'infoasktime',\r\n                                cond: (context) => \"time\" in (grammar[context.recResult[0].utterance] || {}) && context.recResult[0][\"confidence\"] > 0.5,\r\n                                actions: assign({ time: (context) => grammar[context.recResult[0].utterance].time! })\r\n                            },\r\n                            {\r\n                                target: 'confirmasktime',\r\n                                cond: (context) => context.recResult[0][\"confidence\"] < 0.5,\r\n                            },\r\n                            {\r\n                                target: '.nomatch'\r\n                            }\r\n                        ],\r\n                        TIMEOUT: {actions: assign({ counter: (context) => context.counter+1}), target: '.counts'}\r\n                    },\r\n                    states: {\r\n                        counts: {\r\n                            always: [\r\n                            { target: 'prompt', cond: (context) => context.counter === 0},\r\n                            { target: 'prompt2', cond: (context) => context.counter === 1},\r\n                            { target: 'prompt3', cond: (context) => context.counter === 2},\r\n                            { target: '#root.dm.init', cond: (context) => context.counter === 3},\r\n                            ]\r\n                        },\r\n                        prompt: {\r\n                            entry: say(\"What time is your meeting going to be?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        },\r\n                        prompt2: {\r\n                            entry: say(\"What time should I set the meeting for?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        },\r\n                        prompt3: {\r\n                            entry: say(\"Tell me the time for your meeting.\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN')\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Could you please repeat that?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        }\r\n\r\n                    }\r\n                },\r\n                confirmasktime: {\r\n                    initial: 'prompt',\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: 'infoasktime',\r\n                                cond: (context) => 'affirmation' in (grammar2[context.recResult[0].utterance] || {}),\r\n                            },\r\n                            {\r\n                                target: '#root.dm.appointment.asktime',\r\n                                cond: (context) => \"negation\" in (grammar2[context.recResult[0].utterance] || {})\r\n                            },\r\n                        ],\r\n                    },\r\n                    states: {\r\n                        prompt: {\r\n                            entry: send ((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `did you mean to say ${context.time}? `\r\n                            })),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN')\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, I didn't understand. Can you please repeat that?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        }\r\n\r\n                    }\r\n\r\n                },\r\n                infoasktime: {\r\n                    entry: send((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `OK, ${context.time}`\r\n                    })),\r\n                    on: { ENDSPEECH: 'askmeeting2'}\r\n                },\r\n                askmeeting2: {\r\n                    initial: 'prompt',\r\n                    entry: assign({counter: (context) => 0}),\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: '#root.dm.help',\r\n                                cond: (context) => 'help' in (grammar2[context.recResult[0].utterance] || {})\r\n                            },\r\n                            {\r\n                                target: 'meetingcreated',\r\n                                cond: (context) => \"affirmation\" in (grammar2[context.recResult[0].utterance] || {}) && context.recResult[0][\"confidence\"] > 0.5,\r\n                            },\r\n                            {\r\n                                target: 'meeting', cond: (context) => \"negation\" in (grammar2[context.recResult[0].utterance] || {}) && context.recResult[0][\"confidence\"] > 0.5,\r\n\r\n                            },\r\n                            {\r\n                                target: 'confirmmeetingcreated',\r\n                                cond: (context) => context.recResult[0][\"confidence\"] < 0.5,\r\n                            },\r\n                            {\r\n                                target: '.nomatch'\r\n                            }\r\n                        ],\r\n                        TIMEOUT: {actions: assign({ counter: (context) => context.counter+1}), target: '.counts'}\r\n                    },\r\n                    states: {\r\n                        counts: {\r\n                            always: [\r\n                            { target: 'prompt', cond: (context) => context.counter === 0},\r\n                            { target: 'prompt2', cond: (context) => context.counter === 1},\r\n                            { target: 'prompt3', cond: (context) => context.counter === 2},\r\n                            { target: '#root.dm.init', cond: (context) => context.counter === 3},\r\n                            ]\r\n                        },\r\n                        prompt: {\r\n                            entry: send ((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `Do you want me to create a meeting titled ${context.title} on ${context.day} at ${context.time}? `\r\n                            })),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        prompt2: {\r\n                            entry: send ((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `Would you like your meeting ${context.title} to be on ${context.day} at ${context.time}? `\r\n                            })),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        prompt3: {\r\n                            entry: send ((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `Should I set up a meeting named ${context.title} on ${context.day} at ${context.time}? `\r\n                            })),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN')\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, I didn't understand. Can you please repeat that?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        }\r\n\r\n                    }\r\n                },\r\n                confirmmeetingcreated: {\r\n                    initial: 'prompt',\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {\r\n                                target: 'meetingcreated',\r\n                                cond: (context) => 'affirmation' in (grammar2[context.recResult[0].utterance] || {}),\r\n                            },\r\n                            {\r\n                                target: '#root.dm.appointment.askmeeting2',\r\n                                cond: (context) => \"negation\" in (grammar2[context.recResult[0].utterance] || {})\r\n                            },\r\n                        ],\r\n                    },\r\n                    states: {\r\n                        prompt: {\r\n                            entry: send ((context) => ({\r\n                                type: 'SPEAK',\r\n                                value: `did you mean to say that? `\r\n                            })),\r\n                            on: { ENDSPEECH: 'ask' }\r\n                        },\r\n                        ask: {\r\n                            entry: send('LISTEN')\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, I didn't understand. Can you please repeat that?\"),\r\n                            on: { ENDSPEECH: 'ask'}\r\n                        }\r\n\r\n                    }\r\n\r\n                },\r\n                meetingcreated: {\r\n                    initial: 'prompt',\r\n                    states: {\r\n                        prompt: {\r\n                            entry: say(\"Your meeting has been created!\"),\r\n                        },\r\n                    }\r\n                },\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n}\r\n)\r\n","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, actions, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmAppointmentPlus\";\r\n\r\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\r\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\r\n\r\n\r\nconst { send, cancel } = actions\r\n\r\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\r\nconst REGION = 'northeurope';\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\n\r\nconst defaultPassivity = 10\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n\r\n        asrtts: {\r\n            initial: 'init',\r\n            states: {\r\n                init: {\r\n                    on: {\r\n                        CLICK: {\r\n                            target: 'getToken',\r\n                            actions: [\r\n                                assign({\r\n                                    audioCtx: (_ctx) =>\r\n                                        new ((window as any).AudioContext || (window as any).webkitAudioContext)()\r\n                                }),\r\n                                (context) =>\r\n                                    navigator.mediaDevices.getUserMedia({ audio: true })\r\n                                        .then(function(stream) { context.audioCtx.createMediaStreamSource(stream) })\r\n                            ]\r\n                        }\r\n                    }\r\n                },\r\n                getToken: {\r\n                    invoke: {\r\n                        id: \"getAuthorizationToken\",\r\n                        src: (_ctx, _evt) => getAuthorizationToken(),\r\n                        onDone: {\r\n                            actions: [\r\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\r\n                                'ponyfillASR'],\r\n                            target: 'ponyfillTTS'\r\n                        },\r\n                        onError: {\r\n                            target: 'fail'\r\n                        }\r\n                    }\r\n                },\r\n                ponyfillTTS: {\r\n                    invoke: {\r\n                        id: 'ponyTTS',\r\n                        src: (context, _event) => (callback, _onReceive) => {\r\n                            const ponyfill = createSpeechSynthesisPonyfill({\r\n                                audioContext: context.audioCtx,\r\n                                credentials: {\r\n                                    region: REGION,\r\n                                    authorizationToken: context.azureAuthorizationToken,\r\n                                }\r\n                            });\r\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\r\n                            context.tts = speechSynthesis\r\n                            context.ttsUtterance = SpeechSynthesisUtterance\r\n                            context.tts.addEventListener('voiceschanged', () => {\r\n                                context.tts.cancel()\r\n                                const voices = context.tts.getVoices();\r\n                                let voiceRe = RegExp(\"en-US\", 'u')\r\n                                if (process.env.REACT_APP_TTS_VOICE) {\r\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\r\n                                }\r\n                                const voice = voices.find((v: any) => voiceRe.test(v.name))!\r\n                                if (voice) {\r\n                                    context.voice = voice\r\n                                    callback('TTS_READY')\r\n                                } else {\r\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\r\n                                    callback('TTS_ERROR')\r\n                                }\r\n                            })\r\n                        }\r\n                    },\r\n                    on: {\r\n                        TTS_READY: 'idle',\r\n                        TTS_ERROR: 'fail'\r\n                    }\r\n                },\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    },\r\n                },\r\n                recognising: {\r\n                    initial: 'noinput',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => {\r\n                                    return {\r\n                                        recResult: event.value\r\n                                    }\r\n                                })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle',\r\n                        SELECT: 'idle',\r\n                        CLICK: '.pause'\r\n                    },\r\n                    states: {\r\n                        noinput: {\r\n                            entry: [\r\n                                'recStart',\r\n                                send(\r\n                                    { type: 'TIMEOUT' },\r\n                                    { delay: (context) => (1000 * (context.tdmPassivity || defaultPassivity)), id: 'timeout' }\r\n                                )],\r\n                            on: {\r\n                                TIMEOUT: '#root.asrtts.idle',\r\n                                STARTSPEECH: 'inprogress'\r\n                            },\r\n                            exit: cancel('timeout')\r\n                        },\r\n                        inprogress: {\r\n                        },\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                        pause: {\r\n                            entry: 'recStop',\r\n                            on: { CLICK: 'noinput' }\r\n                        }\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                        SELECT: 'idle',\r\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\r\n                    },\r\n                    exit: 'ttsStop',\r\n                },\r\n                fail: {}\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n    alternative: any;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\r\n        .find((el: any) => el.attribute === \"name\") || {}).value;\r\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\r\n        .find((el: any) => el.attribute === \"image\") || {}).value;\r\n    var circleClass = \"circle\"\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\r\n            break;\r\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\r\n            promptText = \"Click to continue\"\r\n            break;\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            circleClass = \"circle-recognising\"\r\n            promptText = promptText || 'Listening...'\r\n            break;\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            circleClass = \"circle-speaking\"\r\n            promptText = promptText || 'Speaking...'\r\n            break;\r\n        case props.state.matches({ dm: 'idle' }):\r\n            promptText = \"Click to start!\"\r\n            circleClass = \"circle-click\"\r\n            break;\r\n        case props.state.matches({ dm: 'init' }):\r\n            promptText = \"Click to start!\"\r\n            circleClass = \"circle-click\"\r\n            break;\r\n        default:\r\n            promptText = promptText || '\\u00A0'\r\n    }\r\n    return (\r\n        <div className=\"control\">\r\n            <figure className=\"prompt\">\r\n                {promptImage &&\r\n                    <img src={promptImage}\r\n                        alt={promptText} />}\r\n            </figure>\r\n            <div className=\"status\">\r\n                <button type=\"button\" className={circleClass}\r\n                    style={{}} {...props}>\r\n                </button>\r\n                <div className=\"status-text\">\r\n                    {promptText}\r\n                </div>\r\n            </div>\r\n        </div>);\r\n}\r\n\r\nconst FigureButton = (props: Props): JSX.Element => {\r\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\r\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\r\n    return (\r\n        <figure className=\"flex\" {...props}>\r\n            {imageSrc &&\r\n                <img src={imageSrc} alt={caption} />}\r\n            <figcaption>{caption}</figcaption>\r\n        </figure>\r\n    )\r\n}\r\n\r\nfunction App() {\r\n    const [current, send] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n\r\n            changeColour: asEffect((context) => {\r\n                document.body.style.background = context.recResult[0].utterance;\r\n                /* console.log('Ready to receive a voice input.'); */\r\n            }),\r\n\r\n            recStart: asEffect((context) => {\r\n                context.asr.start()\r\n                /* console.log('Ready to receive a voice input.'); */\r\n            }),\r\n            recStop: asEffect((context) => {\r\n                context.asr.abort()\r\n                /* console.log('Recognition stopped.'); */\r\n            }),\r\n            ttsStart: asEffect((context) => {\r\n                const utterance = new context.ttsUtterance(context.ttsAgenda);\r\n                console.log(\"S>\", context.ttsAgenda)\r\n                utterance.voice = context.voice\r\n                utterance.onend = () => send('ENDSPEECH')\r\n                context.tts.speak(utterance)\r\n            }),\r\n            ttsStop: asEffect((context) => {\r\n                /* console.log('TTS STOP...'); */\r\n                context.tts.cancel()\r\n            }),\r\n            ponyfillASR: asEffect((context, _event) => {\r\n                const\r\n                    { SpeechRecognition }\r\n                        = createSpeechRecognitionPonyfill({\r\n                            audioContext: context.audioCtx,\r\n                            credentials: {\r\n                                region: REGION,\r\n                                authorizationToken: context.azureAuthorizationToken,\r\n                            }\r\n                        });\r\n                context.asr = new SpeechRecognition()\r\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\r\n                context.asr.continuous = true\r\n                context.asr.interimResults = true\r\n                context.asr.onresult = function(event: any) {\r\n                    var result = event.results[0]\r\n                    if (result.isFinal) {\r\n                        send({\r\n                            type: \"ASRRESULT\", value:\r\n                                [{\r\n                                    \"utterance\": result[0].transcript,\r\n                                    \"confidence\": result[0].confidence\r\n                                }]\r\n                        })\r\n                    } else {\r\n                        send({ type: \"STARTSPEECH\" });\r\n                    }\r\n                }\r\n\r\n            })\r\n        }\r\n    });\r\n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\r\n        .map(\r\n            (o: any, i: any) => (\r\n                <FigureButton state={current}\r\n                    alternative={o.visual_information}\r\n                    key={i}\r\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\r\n            )\r\n        )\r\n\r\n    switch (true) {\r\n        default:\r\n            return (\r\n                <div className=\"App\">\r\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\r\n                    <div className=\"select-wrapper\">\r\n                        <div className=\"select\">\r\n                            {figureButtons}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n    }\r\n\r\n};\r\n\r\nconst getAuthorizationToken = () => (\r\n    fetch(new Request(TOKEN_ENDPOINT, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\r\n        },\r\n    })).then(data => data.text()))\r\n\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}