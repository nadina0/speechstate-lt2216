{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","grammar","title","day","time","grammar2","negation","affirmation","menu_grammar","meeting","person","dmMachine","initial","states","idle","on","CLICK","init","TTS_READY","username","RECOGNISED","target","actions","assign","context","recResult","utterance","TIMEOUT","prompt","entry","ENDSPEECH","ask","hello","menu","cond","nomatch","searchPerson","searching","duckgo","invoke","id","src","event","fetch","Request","then","data","json","onDone","snippet","AbstractText","onError","infoperson","setMeeting","info","askday","infoday","wholeday","infowholeday","meetingwholeday","infomeeting","asktime","infoasktime","askmeeting2","meetingcreated","cancel","REGION","inspect","url","iframe","machine","Machine","dm","asrtts","audioCtx","_ctx","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","stream","createMediaStreamSource","getToken","_evt","getAuthorizationToken","azureAuthorizationToken","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","process","voice","find","v","test","name","console","error","TTS_ERROR","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","SELECT","noinput","delay","tdmPassivity","STARTSPEECH","inprogress","match","pause","speaking","fail","recLogResult","log","logIntent","nluData","intent","ReactiveButton","props","promptText","state","tdmVisualOutputInfo","el","attribute","promptImage","circleClass","matches","className","alt","style","FigureButton","caption","alternative","imageSrc","App","useMachine","devTools","changeColour","asEffect","document","body","background","recStart","asr","start","recStop","abort","ttsStart","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","confidence","current","figureButtons","tdmExpectedAlternatives","filter","o","visual_information","map","i","onClick","semantic_expression","method","headers","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.f5864221.chunk.js","sourcesContent":["import { Context } from \"microsoft-cognitiveservices-speech-sdk/distrib/lib/src/common.speech/RecognizerConfig\";\r\nimport { title } from \"process\";\r\nimport { textSpanIntersectsWith } from \"typescript\";\r\nimport { MachineConfig, send, Action, assign } from \"xstate\";\r\nimport { init } from \"xstate/lib/actionTypes\";\r\nexport {}\r\n\r\ndeclare var context: any\r\n\r\n\r\n\r\n// @ts-ignore\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    // @ts-ignore\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\n\r\nconst kbRequest = (text: string) =>\r\n    fetch(new Request(`https://cors.eu.org/https://api.duckduckgo.com/?q=${text}&format=json&skip_disambig=1`)).then(data => data.json())\r\n\r\n\r\nconst grammar: { [index: string]: { title?: string, day?: string, time?: string } } = {\r\n    \"Lecture.\": { title: \"Dialogue systems lecture\" },\r\n    \"Lunch.\": { title: \"Lunch at the canteen\" },\r\n    \"Socks.\": {title: \"Let's check who has mismatched socks\"},\r\n    \"Food.\": {title: \"We need to find out who's been stealing from the fridge\"},\r\n    \"Brainstorming.\": {title: \"Brainstorming ideas\"},\r\n    \"Bookclub.\": {title: \"Discussing the latest book for our club.\"},\r\n    \"Movie.\": {title: \"Movie night.\"},\r\n    \"Monday\": {day: \"Monday\"},\r\n    \"Tuesday.\": {day: \"Tuesday\"},\r\n    \"Wednesday.\": {day: \"Wednesday\"},\r\n    \"Thursday.\": {day: \"Thursday\"},\r\n    \"Friday\": { day: \"Friday\" },\r\n    \"Tomorrow.\": {day: \"tomorrow\"},\r\n    \"Next week.\": {day: \"next week\"},\r\n    \"At 9\": { time: \"09:00\" },\r\n    \"At 10\": { time: \"10:00\" },\r\n    \"At 11\": { time: \"11:00\" },\r\n    \"At 12\": {time: \"12:00\"},\r\n    \"At 1\": { time: \"13:00\" },\r\n    \"At 2\": {time: \"14:00\"},\r\n    \"At 3\": { time: \"15:00\" },\r\n    \"At 4\": { time: \"16:00\" },\r\n    \"At 5\": { time: \"17:00\" },\r\n    \"At 6\": { time: \"18:00\" },\r\n    \"At 7\": { time: \"19:00\" },\r\n    \"At 8\": { time: \"20:00\" },\r\n}\r\n\r\nconst grammar2: { [index: string]: { negation?: string, affirmation?: string} } = {\r\n    \"No.\": { negation: \"No.\"},\r\n    \"Yes.\": {affirmation: \"Yes.\"},\r\n    \"Of course.\": {affirmation: \"Yes.\"},\r\n    \"No way.\": {negation: \"No.\"},\r\n    \"Sure.\": {affirmation: \"Yes.\"}\r\n}\r\n\r\nconst menu_grammar: { [index: string]: { meeting?: string, person?: string } } = {\r\n    \"I want to create a meeting.\": {meeting: \"Yes\"},\r\n    \"Create a meeting.\": {meeting: \"Yes\"},\r\n    \"Meeting\": {meeting: \"Yes\"},\r\n    \"I want to search for someone.\": {person: \"Yes\"},\r\n    \"Search for someone.\": {person: \"Yes\"},\r\n    \"Search.\": {person: \"Yes\"}\r\n}\r\n\r\n// @ts-ignore\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'idle',\r\n    states: {\r\n        idle: {\r\n            on: {\r\n                CLICK: 'init'\r\n            }\r\n        },\r\n        init: {\r\n            on: {\r\n                TTS_READY: 'username',\r\n                CLICK: 'username'\r\n            }\r\n        },\r\n        username: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'hello',\r\n                        actions: assign({ username: (context) => context.recResult[0].utterance })\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What is your name?\"),\r\n                    on: { ENDSPEECH: 'ask'}\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN')\r\n                }\r\n            }\r\n        },\r\n\r\n        hello: {\r\n            entry: send((context) => ({\r\n                type: 'SPEAK',\r\n                value: `Hi, ${context.username}.`\r\n            })),\r\n            on: { ENDSPEECH: 'menu'}\r\n        }, \r\n\r\n        menu: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'meeting',\r\n                        cond: (context) => \"meeting\" in (menu_grammar[context.recResult[0].utterance] || {}),\r\n                    \r\n                    },\r\n                    {\r\n                        target: 'searchPerson',\r\n                        cond: (context) => \"person\" in (menu_grammar[context.recResult[0].utterance] || {}),\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Do you want to search for someone on the internet or create a meeting?\"),\r\n                    on: {ENDSPEECH: 'ask'}\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN')\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Can you please repeat?\"),\r\n                    on: { ENDSPEECH: 'ask'}\r\n                }\r\n            }\r\n        },\r\n        searchPerson: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'searching',\r\n                        actions: assign({ person: (context) => context.recResult[0].utterance })\r\n                    },\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Who are you searching for?\"),\r\n                    on: {ENDSPEECH: 'ask'}\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN')\r\n                }\r\n            }\r\n        },\r\n        searching: {\r\n            entry: send((context) => ({\r\n                type: 'SPEAK',\r\n                value: `OK, searching the internet for ${context.person}`\r\n            })),\r\n            on: {ENDSPEECH: 'duckgo'}\r\n        },\r\n        duckgo: {\r\n            invoke: {\r\n                id: 'duckduckgo',\r\n                src: (context, event) => kbRequest(context.person),\r\n                onDone: {\r\n                    target: 'infoperson',\r\n                    actions: assign({ snippet: (context, event) => event.data.AbstractText })\r\n                },\r\n                onError: {\r\n                    target: 'searchPerson'\r\n                }\r\n            }\r\n        },\r\n        infoperson: {\r\n            entry: send((context) => ({\r\n                type: 'SPEAK',\r\n                value: `${context.snippet}`\r\n            })),\r\n            on: { ENDSPEECH: 'setMeeting' }\r\n        },\r\n        setMeeting: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'askday',\r\n                        cond: (context) => \"affirmation\" in (grammar2[context.recResult[0].utterance] || {}),\r\n                        actions: assign({ title: (context) => `meeting with ${context.person}`})\r\n                    },\r\n                    {\r\n                        target: 'menu',\r\n                        cond: (context) => 'negation' in (grammar2[context.recResult[0].utterance] || {})\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Do you want to meet them?\"),\r\n                    on: { ENDSPEECH: 'ask'}\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN')\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Could you repeat that?\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                }\r\n            }\r\n        },\r\n        meeting: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'info',\r\n                        cond: (context) => \"title\" in (grammar[context.recResult[0].utterance] || {}),\r\n                        actions: assign({ title: (context) => grammar[context.recResult[0].utterance].title! })\r\n                \r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Let's create a meeting. What is it about?\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN'),\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                }\r\n            }\r\n        },\r\n        info: {\r\n            entry: send((context) => ({\r\n                type: 'SPEAK',\r\n                value: `OK, ${context.title}`\r\n            })),\r\n            on: { ENDSPEECH: 'askday' }\r\n        },\r\n        \r\n        askday: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'infoday',\r\n                        cond: (context) => \"day\" in (grammar[context.recResult[0].utterance] || {}),\r\n                        actions: assign({ day: (context) => grammar[context.recResult[0].utterance].day! })\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"On which day is it?\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN'),\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I didn't understand. Which day is that?\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                }\r\n            }\r\n        },\r\n        infoday: {\r\n            entry: send((context) => ({\r\n                type: 'SPEAK',\r\n                value: `OK, ${context.day}`\r\n            })),\r\n            on: { ENDSPEECH: 'wholeday' }\r\n        },\r\n        wholeday: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'infowholeday',\r\n                        cond: (context) => \"affirmation\" in (grammar2[context.recResult[0].utterance] || {})\r\n                    },\r\n                    {\r\n                        target: 'asktime',\r\n                        cond: (context) => \"negation\" in (grammar2[context.recResult[0].utterance] || {}) \r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Will it take the whole day?\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN'),\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I didn't understand. Can you repeat?\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                }\r\n            }\r\n        },\r\n        infowholeday: {\r\n            entry: send((context) => ({\r\n                type: 'SPEAK',\r\n                value: `{'Ok, Let's set a meeting for the day.'}`\r\n            })),\r\n            on: { ENDSPEECH: 'meetingwholeday'}\r\n        },\r\n        meetingwholeday: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'meetingcreated',\r\n                        cond: (context) => \"affirmation\" in (grammar2[context.recResult[0].utterance] || {})\r\n                    },\r\n                    {\r\n                        target: 'meeting', cond: (context) => \"negation\" in (grammar2[context.recResult[0].utterance] || {})\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send ((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `Do you want me to create a meeting titled ${context.title} on ${context.day} for the whole day? `\r\n                    })),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN'),\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I didn't hear that.\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                }\r\n            }\r\n        },\r\n        infomeeting: {\r\n            entry: send((context) => ({\r\n                type: 'SPEAK',\r\n                value: `OK`\r\n            })),\r\n            on: { ENDSPEECH: 'meetingcreated' }\r\n        },\r\n\r\n        // infotime: {\r\n        //     entry: send((context) => ({\r\n        //         type: 'SPEAK',\r\n        //         value: `{'Ok.}`\r\n        //     })),\r\n        //     on: { ENDSPEECH: 'asktime'}\r\n        // },\r\n        asktime: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'infoasktime',\r\n                        cond: (context) => \"time\" in (grammar[context.recResult[0].utterance] || {}),\r\n                        actions: assign({ time: (context) => grammar[context.recResult[0].utterance].time! })\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What time is your meeting?\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN'),\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I didn't understand. Can you repeat the time?\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                }\r\n            }\r\n        },\r\n        infoasktime: {\r\n            entry: send((context) => ({\r\n                type: 'SPEAK',\r\n                value: `OK, ${context.time}`\r\n            })),\r\n            on: { ENDSPEECH: 'askmeeting2'}\r\n        },\r\n\r\n        askmeeting2: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'meetingcreated',\r\n                        cond: (context) => \"affirmation\" in (grammar2[context.recResult[0].utterance] || {}),\r\n                    },\r\n                    {\r\n                        target: 'meeting', cond: (context) => \"negation\" in (grammar2[context.recResult[0].utterance] || {}),\r\n\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send ((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `Do you want me to create a meeting titled ${context.title} on ${context.day} at ${context.time}? `\r\n                    })),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: send('LISTEN'),\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I didn't hear that.\"),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                }\r\n            }\r\n        },\r\n        meetingcreated: {\r\n            initial: 'prompt',\r\n            \r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Your meeting has been created!\"),\r\n                },\r\n            }\r\n        },\r\n\r\n\r\n    }\r\n}\r\n)\r\n","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, actions, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmAppointment\";\r\n\r\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\r\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\r\n\r\n\r\nconst { send, cancel } = actions\r\n\r\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\r\nconst REGION = 'northeurope';\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\n\r\nconst defaultPassivity = 10\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n\r\n        asrtts: {\r\n            initial: 'init',\r\n            states: {\r\n                init: {\r\n                    on: {\r\n                        CLICK: {\r\n                            target: 'getToken',\r\n                            actions: [\r\n                                assign({\r\n                                    audioCtx: (_ctx) =>\r\n                                        new ((window as any).AudioContext || (window as any).webkitAudioContext)()\r\n                                }),\r\n                                (context) =>\r\n                                    navigator.mediaDevices.getUserMedia({ audio: true })\r\n                                        .then(function(stream) { context.audioCtx.createMediaStreamSource(stream) })\r\n                            ]\r\n                        }\r\n                    }\r\n                },\r\n                getToken: {\r\n                    invoke: {\r\n                        id: \"getAuthorizationToken\",\r\n                        src: (_ctx, _evt) => getAuthorizationToken(),\r\n                        onDone: {\r\n                            actions: [\r\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\r\n                                'ponyfillASR'],\r\n                            target: 'ponyfillTTS'\r\n                        },\r\n                        onError: {\r\n                            target: 'fail'\r\n                        }\r\n                    }\r\n                },\r\n                ponyfillTTS: {\r\n                    invoke: {\r\n                        id: 'ponyTTS',\r\n                        src: (context, _event) => (callback, _onReceive) => {\r\n                            const ponyfill = createSpeechSynthesisPonyfill({\r\n                                audioContext: context.audioCtx,\r\n                                credentials: {\r\n                                    region: REGION,\r\n                                    authorizationToken: context.azureAuthorizationToken,\r\n                                }\r\n                            });\r\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\r\n                            context.tts = speechSynthesis\r\n                            context.ttsUtterance = SpeechSynthesisUtterance\r\n                            context.tts.addEventListener('voiceschanged', () => {\r\n                                context.tts.cancel()\r\n                                const voices = context.tts.getVoices();\r\n                                let voiceRe = RegExp(\"en-US\", 'u')\r\n                                if (process.env.REACT_APP_TTS_VOICE) {\r\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\r\n                                }\r\n                                const voice = voices.find((v: any) => voiceRe.test(v.name))!\r\n                                if (voice) {\r\n                                    context.voice = voice\r\n                                    callback('TTS_READY')\r\n                                } else {\r\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\r\n                                    callback('TTS_ERROR')\r\n                                }\r\n                            })\r\n                        }\r\n                    },\r\n                    on: {\r\n                        TTS_READY: 'idle',\r\n                        TTS_ERROR: 'fail'\r\n                    }\r\n                },\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    },\r\n                },\r\n                recognising: {\r\n                    initial: 'noinput',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => {\r\n                                    return {\r\n                                        recResult: event.value\r\n                                    }\r\n                                })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle',\r\n                        SELECT: 'idle',\r\n                        CLICK: '.pause'\r\n                    },\r\n                    states: {\r\n                        noinput: {\r\n                            entry: [\r\n                                'recStart',\r\n                                send(\r\n                                    { type: 'TIMEOUT' },\r\n                                    { delay: (context) => (1000 * (context.tdmPassivity || defaultPassivity)), id: 'timeout' }\r\n                                )],\r\n                            on: {\r\n                                TIMEOUT: '#root.asrtts.idle',\r\n                                STARTSPEECH: 'inprogress'\r\n                            },\r\n                            exit: cancel('timeout')\r\n                        },\r\n                        inprogress: {\r\n                        },\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                        pause: {\r\n                            entry: 'recStop',\r\n                            on: { CLICK: 'noinput' }\r\n                        }\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                        SELECT: 'idle',\r\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\r\n                    },\r\n                    exit: 'ttsStop',\r\n                },\r\n                fail: {}\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n    alternative: any;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\r\n        .find((el: any) => el.attribute === \"name\") || {}).value;\r\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\r\n        .find((el: any) => el.attribute === \"image\") || {}).value;\r\n    var circleClass = \"circle\"\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\r\n            break;\r\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\r\n            promptText = \"Click to continue\"\r\n            break;\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            circleClass = \"circle-recognising\"\r\n            promptText = promptText || 'Listening...'\r\n            break;\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            circleClass = \"circle-speaking\"\r\n            promptText = promptText || 'Speaking...'\r\n            break;\r\n        case props.state.matches({ dm: 'idle' }):\r\n            promptText = \"Click to start!\"\r\n            circleClass = \"circle-click\"\r\n            break;\r\n        case props.state.matches({ dm: 'init' }):\r\n            promptText = \"Click to start!\"\r\n            circleClass = \"circle-click\"\r\n            break;\r\n        default:\r\n            promptText = promptText || '\\u00A0'\r\n    }\r\n    return (\r\n        <div className=\"control\">\r\n            <figure className=\"prompt\">\r\n                {promptImage &&\r\n                    <img src={promptImage}\r\n                        alt={promptText} />}\r\n            </figure>\r\n            <div className=\"status\">\r\n                <button type=\"button\" className={circleClass}\r\n                    style={{}} {...props}>\r\n                </button>\r\n                <div className=\"status-text\">\r\n                    {promptText}\r\n                </div>\r\n            </div>\r\n        </div>);\r\n}\r\n\r\nconst FigureButton = (props: Props): JSX.Element => {\r\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\r\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\r\n    return (\r\n        <figure className=\"flex\" {...props}>\r\n            {imageSrc &&\r\n                <img src={imageSrc} alt={caption} />}\r\n            <figcaption>{caption}</figcaption>\r\n        </figure>\r\n    )\r\n}\r\n\r\nfunction App() {\r\n    const [current, send] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n\r\n            changeColour: asEffect((context) => {\r\n                document.body.style.background = context.recResult[0].utterance;\r\n                /* console.log('Ready to receive a voice input.'); */\r\n            }),\r\n\r\n            recStart: asEffect((context) => {\r\n                context.asr.start()\r\n                /* console.log('Ready to receive a voice input.'); */\r\n            }),\r\n            recStop: asEffect((context) => {\r\n                context.asr.abort()\r\n                /* console.log('Recognition stopped.'); */\r\n            }),\r\n            ttsStart: asEffect((context) => {\r\n                const utterance = new context.ttsUtterance(context.ttsAgenda);\r\n                console.log(\"S>\", context.ttsAgenda)\r\n                utterance.voice = context.voice\r\n                utterance.onend = () => send('ENDSPEECH')\r\n                context.tts.speak(utterance)\r\n            }),\r\n            ttsStop: asEffect((context) => {\r\n                /* console.log('TTS STOP...'); */\r\n                context.tts.cancel()\r\n            }),\r\n            ponyfillASR: asEffect((context, _event) => {\r\n                const\r\n                    { SpeechRecognition }\r\n                        = createSpeechRecognitionPonyfill({\r\n                            audioContext: context.audioCtx,\r\n                            credentials: {\r\n                                region: REGION,\r\n                                authorizationToken: context.azureAuthorizationToken,\r\n                            }\r\n                        });\r\n                context.asr = new SpeechRecognition()\r\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\r\n                context.asr.continuous = true\r\n                context.asr.interimResults = true\r\n                context.asr.onresult = function(event: any) {\r\n                    var result = event.results[0]\r\n                    if (result.isFinal) {\r\n                        send({\r\n                            type: \"ASRRESULT\", value:\r\n                                [{\r\n                                    \"utterance\": result[0].transcript,\r\n                                    \"confidence\": result[0].confidence\r\n                                }]\r\n                        })\r\n                    } else {\r\n                        send({ type: \"STARTSPEECH\" });\r\n                    }\r\n                }\r\n\r\n            })\r\n        }\r\n    });\r\n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\r\n        .map(\r\n            (o: any, i: any) => (\r\n                <FigureButton state={current}\r\n                    alternative={o.visual_information}\r\n                    key={i}\r\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\r\n            )\r\n        )\r\n\r\n    switch (true) {\r\n        default:\r\n            return (\r\n                <div className=\"App\">\r\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\r\n                    <div className=\"select-wrapper\">\r\n                        <div className=\"select\">\r\n                            {figureButtons}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n    }\r\n\r\n};\r\n\r\nconst getAuthorizationToken = () => (\r\n    fetch(new Request(TOKEN_ENDPOINT, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\r\n        },\r\n    })).then(data => data.text()))\r\n\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}